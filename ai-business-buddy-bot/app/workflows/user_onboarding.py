from temporalio import workflow
from datetime import timedelta
from app.workflows.activities import messaging, db, llm

@workflow.defn
class UserOnboardingWorkflow:
    @workflow.run
    async def run(self, user: dict):
        self.telegram_id = user["telegram_id"]
        self.answers = []
        self.profile = {}
        self.language = "en"

        welcome_msg = await workflow.execute_activity(
            llm.generate_welcome_message,
            args=[str(self.telegram_id)],
            schedule_to_close_timeout=timedelta(seconds=15),
        )

        await workflow.execute_activity(
            messaging.send_message,
            args=[int(self.telegram_id), welcome_msg],
            schedule_to_close_timeout=timedelta(seconds=15),
        )

        await workflow.wait_condition(lambda: hasattr(self, "first_answer"))

        self.language = await workflow.execute_activity(
            llm.detect_language,
            args=[self.first_answer],
            schedule_to_close_timeout=timedelta(seconds=10),
        )

        await workflow.execute_activity(
            db.set_user_language,
            args=[int(self.telegram_id), self.language],
            schedule_to_close_timeout=timedelta(seconds=5),
        )

        self.finished = False
        while not self.finished:
            question_data = await workflow.execute_activity(
                llm.get_next_question,
                args=[self.profile, [a["answer"] for a in self.answers], self.language],
                schedule_to_close_timeout=timedelta(seconds=60),
            )

            question_text = question_data["question"]

            await workflow.execute_activity(
                messaging.send_message,
                args=[int(self.telegram_id), question_text],
                schedule_to_close_timeout=timedelta(seconds=15),
            )

            await workflow.wait_condition(lambda: hasattr(self, "last_answer"))

            answer = self.last_answer
            del self.last_answer

            if question_data.get("is_email"):
                await workflow.execute_activity(
                    db.save_user_email,
                    args=[int(self.telegram_id), answer],
                    schedule_to_close_timeout=timedelta(seconds=10),
                )
                # –î–ª—è email —Ç–æ–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç–≤–µ—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                self.answers.append({"question": question_text, "answer": answer})

            else:
                await workflow.execute_activity(
                    db.save_answer,
                    args=[int(self.telegram_id), {"question": question_text, "answer": answer}],
                    schedule_to_close_timeout=timedelta(seconds=15),
                )
                self.answers.append({"question": question_text, "answer": answer})

            if question_data.get("is_final"):
                self.finished = True
                await workflow.execute_activity(
                    db.mark_survey_complete,
                    args=[int(self.telegram_id)],
                    schedule_to_close_timeout=timedelta(seconds=5),
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                final_message = """üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞!

–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.

–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ AI Business Buddy –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ä–µ—à–∏—Ç—å –≤–∞—à–∏ –∑–∞–¥–∞—á–∏

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!"""
                await workflow.execute_activity(
                    messaging.send_message,
                    args=[int(self.telegram_id), final_message],
                    schedule_to_close_timeout=timedelta(seconds=15),
                )

    @workflow.signal
    async def submit_answer(self, answer: str):
        if not hasattr(self, "first_answer"):
            self.first_answer = answer
        else:
            self.last_answer = answer