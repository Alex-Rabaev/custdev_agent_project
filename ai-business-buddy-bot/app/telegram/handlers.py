from aiogram import Router, types, F
from aiogram.filters import CommandStart
from app.database.mongo import users_collection
from datetime import datetime, timezone
from app.temporal_client.client import start_user_workflow
from app.temporal_client.client import get_temporal_client
from temporalio.exceptions import WorkflowAlreadyStartedError
from temporalio.service import RPCError
from app.workflows.user_onboarding import UserOnboardingWorkflow

router = Router()

@router.message(CommandStart())
async def handle_start(message: types.Message):
    print(f"[START] Got message id: {message.message_id} from user {message.from_user.id}")
    user = {
        "telegram_id": message.from_user.id,
        "first_name": message.from_user.first_name,
        "last_name": message.from_user.last_name,
        "username": message.from_user.username,
        "language": message.from_user.language_code or "en",
        "created_at": datetime.now(timezone.utc),
        "answers": [],
        "profile": {},
        "email": None
    }

    existing = users_collection.find_one({"telegram_id": message.from_user.id})
    if not existing:
        users_collection.insert_one(user)
    else:
        users_collection.update_one(
            {"telegram_id": message.from_user.id},
            {"$set": {"last_visit": datetime.now(timezone.utc)}}
        )

    await message.answer(
        "üëã I am AI Business Buddy ‚Äî your assistant for business management. "
    )

    user.pop("_id", None)

    # –ó–∞–ø—É—Å–∫ Temporal workflow
    await start_user_workflow(user)


@router.message(F.text)
async def handle_text_message(message: types.Message):
    telegram_id = message.from_user.id
    answer_text = message.text.strip()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º Temporal client
    client = await get_temporal_client()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ö–µ–Ω–¥–ª workflow –ø–æ ID
        handle = client.get_workflow_handle(f"user-onboarding-{telegram_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ workflow
        await handle.signal(UserOnboardingWorkflow.submit_answer, answer_text)
        await message.answer("‚úÖ")
    except RPCError as e:
        if "workflow execution already completed" in str(e):
            await message.answer("‚ö†Ô∏è –û–ø—Ä–æ—Å —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.")
        else:
            # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ fallback
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            raise